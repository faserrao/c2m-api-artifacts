// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// DocumentSourceIdentifier
    /// </summary>
    public partial class DocumentSourceIdentifier : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSourceIdentifier" /> class.
        /// </summary>
        /// <param name="documentSourceVariant1"></param>
        public DocumentSourceIdentifier(DocumentSourceVariant1 documentSourceVariant1)
        {
            DocumentSourceVariant1 = documentSourceVariant1;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSourceIdentifier" /> class.
        /// </summary>
        /// <param name="documentSourceVariant2"></param>
        public DocumentSourceIdentifier(DocumentSourceVariant2 documentSourceVariant2)
        {
            DocumentSourceVariant2 = documentSourceVariant2;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSourceIdentifier" /> class.
        /// </summary>
        /// <param name="documentSourceWithUpload"></param>
        public DocumentSourceIdentifier(DocumentSourceWithUpload documentSourceWithUpload)
        {
            DocumentSourceWithUpload = documentSourceWithUpload;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSourceIdentifier" /> class.
        /// </summary>
        /// <param name="documentSourceWithUploadAndZip"></param>
        public DocumentSourceIdentifier(DocumentSourceWithUploadAndZip documentSourceWithUploadAndZip)
        {
            DocumentSourceWithUploadAndZip = documentSourceWithUploadAndZip;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSourceIdentifier" /> class.
        /// </summary>
        /// <param name="documentSourceFromZip"></param>
        public DocumentSourceIdentifier(DocumentSourceFromZip documentSourceFromZip)
        {
            DocumentSourceFromZip = documentSourceFromZip;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets DocumentSourceVariant1
        /// </summary>
        public DocumentSourceVariant1? DocumentSourceVariant1 { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSourceVariant2
        /// </summary>
        public DocumentSourceVariant2? DocumentSourceVariant2 { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSourceWithUpload
        /// </summary>
        public DocumentSourceWithUpload? DocumentSourceWithUpload { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSourceWithUploadAndZip
        /// </summary>
        public DocumentSourceWithUploadAndZip? DocumentSourceWithUploadAndZip { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSourceFromZip
        /// </summary>
        public DocumentSourceFromZip? DocumentSourceFromZip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentSourceIdentifier {\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DocumentSourceIdentifier" />
    /// </summary>
    public class DocumentSourceIdentifierJsonConverter : JsonConverter<DocumentSourceIdentifier>
    {
        /// <summary>
        /// Deserializes json to <see cref="DocumentSourceIdentifier" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DocumentSourceIdentifier Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            DocumentSourceVariant1? documentSourceVariant1 = default;
            DocumentSourceVariant2? documentSourceVariant2 = default;
            DocumentSourceWithUpload? documentSourceWithUpload = default;
            DocumentSourceWithUploadAndZip? documentSourceWithUploadAndZip = default;
            DocumentSourceFromZip? documentSourceFromZip = default;

            Utf8JsonReader utf8JsonReaderOneOf = utf8JsonReader;
            while (utf8JsonReaderOneOf.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (utf8JsonReaderOneOf.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderOneOf.CurrentDepth - 1)
                {
                    Utf8JsonReader utf8JsonReaderDocumentSourceVariant1 = utf8JsonReader;
                    ClientUtils.TryDeserialize<DocumentSourceVariant1?>(ref utf8JsonReaderDocumentSourceVariant1, jsonSerializerOptions, out documentSourceVariant1);

                    Utf8JsonReader utf8JsonReaderDocumentSourceVariant2 = utf8JsonReader;
                    ClientUtils.TryDeserialize<DocumentSourceVariant2?>(ref utf8JsonReaderDocumentSourceVariant2, jsonSerializerOptions, out documentSourceVariant2);

                    Utf8JsonReader utf8JsonReaderDocumentSourceWithUpload = utf8JsonReader;
                    ClientUtils.TryDeserialize<DocumentSourceWithUpload?>(ref utf8JsonReaderDocumentSourceWithUpload, jsonSerializerOptions, out documentSourceWithUpload);

                    Utf8JsonReader utf8JsonReaderDocumentSourceWithUploadAndZip = utf8JsonReader;
                    ClientUtils.TryDeserialize<DocumentSourceWithUploadAndZip?>(ref utf8JsonReaderDocumentSourceWithUploadAndZip, jsonSerializerOptions, out documentSourceWithUploadAndZip);

                    Utf8JsonReader utf8JsonReaderDocumentSourceFromZip = utf8JsonReader;
                    ClientUtils.TryDeserialize<DocumentSourceFromZip?>(ref utf8JsonReaderDocumentSourceFromZip, jsonSerializerOptions, out documentSourceFromZip);
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        default:
                            break;
                    }
                }
            }

            if (documentSourceVariant1 != null)
                return new DocumentSourceIdentifier(documentSourceVariant1);

            if (documentSourceVariant2 != null)
                return new DocumentSourceIdentifier(documentSourceVariant2);

            if (documentSourceWithUpload != null)
                return new DocumentSourceIdentifier(documentSourceWithUpload);

            if (documentSourceWithUploadAndZip != null)
                return new DocumentSourceIdentifier(documentSourceWithUploadAndZip);

            if (documentSourceFromZip != null)
                return new DocumentSourceIdentifier(documentSourceFromZip);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="DocumentSourceIdentifier" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentSourceIdentifier"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DocumentSourceIdentifier documentSourceIdentifier, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, documentSourceIdentifier, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DocumentSourceIdentifier" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentSourceIdentifier"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DocumentSourceIdentifier documentSourceIdentifier, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
