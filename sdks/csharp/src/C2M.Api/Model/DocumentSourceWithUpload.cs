// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// DocumentSourceWithUpload
    /// </summary>
    public partial class DocumentSourceWithUpload : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSourceWithUpload" /> class.
        /// </summary>
        /// <param name="uploadRequestId">uploadRequestId</param>
        /// <param name="documentName">documentName</param>
        [JsonConstructor]
        public DocumentSourceWithUpload(int uploadRequestId, string documentName)
        {
            UploadRequestId = uploadRequestId;
            DocumentName = documentName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets UploadRequestId
        /// </summary>
        [JsonPropertyName("uploadRequestId")]
        public int UploadRequestId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentName
        /// </summary>
        [JsonPropertyName("documentName")]
        public string DocumentName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentSourceWithUpload {\n");
            sb.Append("  UploadRequestId: ").Append(UploadRequestId).Append("\n");
            sb.Append("  DocumentName: ").Append(DocumentName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DocumentSourceWithUpload" />
    /// </summary>
    public class DocumentSourceWithUploadJsonConverter : JsonConverter<DocumentSourceWithUpload>
    {
        /// <summary>
        /// Deserializes json to <see cref="DocumentSourceWithUpload" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DocumentSourceWithUpload Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> uploadRequestId = default;
            Option<string?> documentName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "uploadRequestId":
                            uploadRequestId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "documentName":
                            documentName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!uploadRequestId.IsSet)
                throw new ArgumentException("Property is required for class DocumentSourceWithUpload.", nameof(uploadRequestId));

            if (!documentName.IsSet)
                throw new ArgumentException("Property is required for class DocumentSourceWithUpload.", nameof(documentName));

            if (uploadRequestId.IsSet && uploadRequestId.Value == null)
                throw new ArgumentNullException(nameof(uploadRequestId), "Property is not nullable for class DocumentSourceWithUpload.");

            if (documentName.IsSet && documentName.Value == null)
                throw new ArgumentNullException(nameof(documentName), "Property is not nullable for class DocumentSourceWithUpload.");

            return new DocumentSourceWithUpload(uploadRequestId.Value!.Value!, documentName.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="DocumentSourceWithUpload" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentSourceWithUpload"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DocumentSourceWithUpload documentSourceWithUpload, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, documentSourceWithUpload, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DocumentSourceWithUpload" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentSourceWithUpload"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DocumentSourceWithUpload documentSourceWithUpload, JsonSerializerOptions jsonSerializerOptions)
        {
            if (documentSourceWithUpload.DocumentName == null)
                throw new ArgumentNullException(nameof(documentSourceWithUpload.DocumentName), "Property is required for class DocumentSourceWithUpload.");

            writer.WriteNumber("uploadRequestId", documentSourceWithUpload.UploadRequestId);

            writer.WriteString("documentName", documentSourceWithUpload.DocumentName);
        }
    }
}
