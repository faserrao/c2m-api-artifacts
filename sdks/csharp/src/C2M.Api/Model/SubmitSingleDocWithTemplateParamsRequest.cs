// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// SubmitSingleDocWithTemplateParamsRequest
    /// </summary>
    public partial class SubmitSingleDocWithTemplateParamsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmitSingleDocWithTemplateParamsRequest" /> class.
        /// </summary>
        /// <param name="submitSingleDocWithTemplateParamsRequestOneOf"></param>
        public SubmitSingleDocWithTemplateParamsRequest(SubmitSingleDocWithTemplateParamsRequestOneOf submitSingleDocWithTemplateParamsRequestOneOf)
        {
            SubmitSingleDocWithTemplateParamsRequestOneOf = submitSingleDocWithTemplateParamsRequestOneOf;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmitSingleDocWithTemplateParamsRequest" /> class.
        /// </summary>
        /// <param name="submitSingleDocWithTemplateParamsRequestOneOf1"></param>
        public SubmitSingleDocWithTemplateParamsRequest(SubmitSingleDocWithTemplateParamsRequestOneOf1 submitSingleDocWithTemplateParamsRequestOneOf1)
        {
            SubmitSingleDocWithTemplateParamsRequestOneOf1 = submitSingleDocWithTemplateParamsRequestOneOf1;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmitSingleDocWithTemplateParamsRequest" /> class.
        /// </summary>
        /// <param name="submitSingleDocWithTemplateParamsRequestOneOf2"></param>
        public SubmitSingleDocWithTemplateParamsRequest(SubmitSingleDocWithTemplateParamsRequestOneOf2 submitSingleDocWithTemplateParamsRequestOneOf2)
        {
            SubmitSingleDocWithTemplateParamsRequestOneOf2 = submitSingleDocWithTemplateParamsRequestOneOf2;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets SubmitSingleDocWithTemplateParamsRequestOneOf
        /// </summary>
        public SubmitSingleDocWithTemplateParamsRequestOneOf? SubmitSingleDocWithTemplateParamsRequestOneOf { get; set; }

        /// <summary>
        /// Gets or Sets SubmitSingleDocWithTemplateParamsRequestOneOf1
        /// </summary>
        public SubmitSingleDocWithTemplateParamsRequestOneOf1? SubmitSingleDocWithTemplateParamsRequestOneOf1 { get; set; }

        /// <summary>
        /// Gets or Sets SubmitSingleDocWithTemplateParamsRequestOneOf2
        /// </summary>
        public SubmitSingleDocWithTemplateParamsRequestOneOf2? SubmitSingleDocWithTemplateParamsRequestOneOf2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubmitSingleDocWithTemplateParamsRequest {\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SubmitSingleDocWithTemplateParamsRequest" />
    /// </summary>
    public class SubmitSingleDocWithTemplateParamsRequestJsonConverter : JsonConverter<SubmitSingleDocWithTemplateParamsRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="SubmitSingleDocWithTemplateParamsRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SubmitSingleDocWithTemplateParamsRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            SubmitSingleDocWithTemplateParamsRequestOneOf? submitSingleDocWithTemplateParamsRequestOneOf = default;
            SubmitSingleDocWithTemplateParamsRequestOneOf1? submitSingleDocWithTemplateParamsRequestOneOf1 = default;
            SubmitSingleDocWithTemplateParamsRequestOneOf2? submitSingleDocWithTemplateParamsRequestOneOf2 = default;

            Utf8JsonReader utf8JsonReaderOneOf = utf8JsonReader;
            while (utf8JsonReaderOneOf.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (utf8JsonReaderOneOf.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderOneOf.CurrentDepth - 1)
                {
                    Utf8JsonReader utf8JsonReaderSubmitSingleDocWithTemplateParamsRequestOneOf = utf8JsonReader;
                    ClientUtils.TryDeserialize<SubmitSingleDocWithTemplateParamsRequestOneOf?>(ref utf8JsonReaderSubmitSingleDocWithTemplateParamsRequestOneOf, jsonSerializerOptions, out submitSingleDocWithTemplateParamsRequestOneOf);

                    Utf8JsonReader utf8JsonReaderSubmitSingleDocWithTemplateParamsRequestOneOf1 = utf8JsonReader;
                    ClientUtils.TryDeserialize<SubmitSingleDocWithTemplateParamsRequestOneOf1?>(ref utf8JsonReaderSubmitSingleDocWithTemplateParamsRequestOneOf1, jsonSerializerOptions, out submitSingleDocWithTemplateParamsRequestOneOf1);

                    Utf8JsonReader utf8JsonReaderSubmitSingleDocWithTemplateParamsRequestOneOf2 = utf8JsonReader;
                    ClientUtils.TryDeserialize<SubmitSingleDocWithTemplateParamsRequestOneOf2?>(ref utf8JsonReaderSubmitSingleDocWithTemplateParamsRequestOneOf2, jsonSerializerOptions, out submitSingleDocWithTemplateParamsRequestOneOf2);
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        default:
                            break;
                    }
                }
            }

            if (submitSingleDocWithTemplateParamsRequestOneOf != null)
                return new SubmitSingleDocWithTemplateParamsRequest(submitSingleDocWithTemplateParamsRequestOneOf);

            if (submitSingleDocWithTemplateParamsRequestOneOf1 != null)
                return new SubmitSingleDocWithTemplateParamsRequest(submitSingleDocWithTemplateParamsRequestOneOf1);

            if (submitSingleDocWithTemplateParamsRequestOneOf2 != null)
                return new SubmitSingleDocWithTemplateParamsRequest(submitSingleDocWithTemplateParamsRequestOneOf2);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="SubmitSingleDocWithTemplateParamsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="submitSingleDocWithTemplateParamsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, submitSingleDocWithTemplateParamsRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SubmitSingleDocWithTemplateParamsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="submitSingleDocWithTemplateParamsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
