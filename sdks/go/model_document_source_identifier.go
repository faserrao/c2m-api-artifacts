/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DocumentSourceIdentifier - struct for DocumentSourceIdentifier
type DocumentSourceIdentifier struct {
	DocumentSourceFromZip *DocumentSourceFromZip
	DocumentSourceVariant1 *DocumentSourceVariant1
	DocumentSourceVariant2 *DocumentSourceVariant2
	DocumentSourceWithUpload *DocumentSourceWithUpload
	DocumentSourceWithUploadAndZip *DocumentSourceWithUploadAndZip
}

// DocumentSourceFromZipAsDocumentSourceIdentifier is a convenience function that returns DocumentSourceFromZip wrapped in DocumentSourceIdentifier
func DocumentSourceFromZipAsDocumentSourceIdentifier(v *DocumentSourceFromZip) DocumentSourceIdentifier {
	return DocumentSourceIdentifier{
		DocumentSourceFromZip: v,
	}
}

// DocumentSourceVariant1AsDocumentSourceIdentifier is a convenience function that returns DocumentSourceVariant1 wrapped in DocumentSourceIdentifier
func DocumentSourceVariant1AsDocumentSourceIdentifier(v *DocumentSourceVariant1) DocumentSourceIdentifier {
	return DocumentSourceIdentifier{
		DocumentSourceVariant1: v,
	}
}

// DocumentSourceVariant2AsDocumentSourceIdentifier is a convenience function that returns DocumentSourceVariant2 wrapped in DocumentSourceIdentifier
func DocumentSourceVariant2AsDocumentSourceIdentifier(v *DocumentSourceVariant2) DocumentSourceIdentifier {
	return DocumentSourceIdentifier{
		DocumentSourceVariant2: v,
	}
}

// DocumentSourceWithUploadAsDocumentSourceIdentifier is a convenience function that returns DocumentSourceWithUpload wrapped in DocumentSourceIdentifier
func DocumentSourceWithUploadAsDocumentSourceIdentifier(v *DocumentSourceWithUpload) DocumentSourceIdentifier {
	return DocumentSourceIdentifier{
		DocumentSourceWithUpload: v,
	}
}

// DocumentSourceWithUploadAndZipAsDocumentSourceIdentifier is a convenience function that returns DocumentSourceWithUploadAndZip wrapped in DocumentSourceIdentifier
func DocumentSourceWithUploadAndZipAsDocumentSourceIdentifier(v *DocumentSourceWithUploadAndZip) DocumentSourceIdentifier {
	return DocumentSourceIdentifier{
		DocumentSourceWithUploadAndZip: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DocumentSourceIdentifier) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DocumentSourceFromZip
	err = newStrictDecoder(data).Decode(&dst.DocumentSourceFromZip)
	if err == nil {
		jsonDocumentSourceFromZip, _ := json.Marshal(dst.DocumentSourceFromZip)
		if string(jsonDocumentSourceFromZip) == "{}" { // empty struct
			dst.DocumentSourceFromZip = nil
		} else {
			if err = validator.Validate(dst.DocumentSourceFromZip); err != nil {
				dst.DocumentSourceFromZip = nil
			} else {
				match++
			}
		}
	} else {
		dst.DocumentSourceFromZip = nil
	}

	// try to unmarshal data into DocumentSourceVariant1
	err = newStrictDecoder(data).Decode(&dst.DocumentSourceVariant1)
	if err == nil {
		jsonDocumentSourceVariant1, _ := json.Marshal(dst.DocumentSourceVariant1)
		if string(jsonDocumentSourceVariant1) == "{}" { // empty struct
			dst.DocumentSourceVariant1 = nil
		} else {
			if err = validator.Validate(dst.DocumentSourceVariant1); err != nil {
				dst.DocumentSourceVariant1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DocumentSourceVariant1 = nil
	}

	// try to unmarshal data into DocumentSourceVariant2
	err = newStrictDecoder(data).Decode(&dst.DocumentSourceVariant2)
	if err == nil {
		jsonDocumentSourceVariant2, _ := json.Marshal(dst.DocumentSourceVariant2)
		if string(jsonDocumentSourceVariant2) == "{}" { // empty struct
			dst.DocumentSourceVariant2 = nil
		} else {
			if err = validator.Validate(dst.DocumentSourceVariant2); err != nil {
				dst.DocumentSourceVariant2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DocumentSourceVariant2 = nil
	}

	// try to unmarshal data into DocumentSourceWithUpload
	err = newStrictDecoder(data).Decode(&dst.DocumentSourceWithUpload)
	if err == nil {
		jsonDocumentSourceWithUpload, _ := json.Marshal(dst.DocumentSourceWithUpload)
		if string(jsonDocumentSourceWithUpload) == "{}" { // empty struct
			dst.DocumentSourceWithUpload = nil
		} else {
			if err = validator.Validate(dst.DocumentSourceWithUpload); err != nil {
				dst.DocumentSourceWithUpload = nil
			} else {
				match++
			}
		}
	} else {
		dst.DocumentSourceWithUpload = nil
	}

	// try to unmarshal data into DocumentSourceWithUploadAndZip
	err = newStrictDecoder(data).Decode(&dst.DocumentSourceWithUploadAndZip)
	if err == nil {
		jsonDocumentSourceWithUploadAndZip, _ := json.Marshal(dst.DocumentSourceWithUploadAndZip)
		if string(jsonDocumentSourceWithUploadAndZip) == "{}" { // empty struct
			dst.DocumentSourceWithUploadAndZip = nil
		} else {
			if err = validator.Validate(dst.DocumentSourceWithUploadAndZip); err != nil {
				dst.DocumentSourceWithUploadAndZip = nil
			} else {
				match++
			}
		}
	} else {
		dst.DocumentSourceWithUploadAndZip = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DocumentSourceFromZip = nil
		dst.DocumentSourceVariant1 = nil
		dst.DocumentSourceVariant2 = nil
		dst.DocumentSourceWithUpload = nil
		dst.DocumentSourceWithUploadAndZip = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DocumentSourceIdentifier)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DocumentSourceIdentifier)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DocumentSourceIdentifier) MarshalJSON() ([]byte, error) {
	if src.DocumentSourceFromZip != nil {
		return json.Marshal(&src.DocumentSourceFromZip)
	}

	if src.DocumentSourceVariant1 != nil {
		return json.Marshal(&src.DocumentSourceVariant1)
	}

	if src.DocumentSourceVariant2 != nil {
		return json.Marshal(&src.DocumentSourceVariant2)
	}

	if src.DocumentSourceWithUpload != nil {
		return json.Marshal(&src.DocumentSourceWithUpload)
	}

	if src.DocumentSourceWithUploadAndZip != nil {
		return json.Marshal(&src.DocumentSourceWithUploadAndZip)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DocumentSourceIdentifier) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DocumentSourceFromZip != nil {
		return obj.DocumentSourceFromZip
	}

	if obj.DocumentSourceVariant1 != nil {
		return obj.DocumentSourceVariant1
	}

	if obj.DocumentSourceVariant2 != nil {
		return obj.DocumentSourceVariant2
	}

	if obj.DocumentSourceWithUpload != nil {
		return obj.DocumentSourceWithUpload
	}

	if obj.DocumentSourceWithUploadAndZip != nil {
		return obj.DocumentSourceWithUploadAndZip
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DocumentSourceIdentifier) GetActualInstanceValue() (interface{}) {
	if obj.DocumentSourceFromZip != nil {
		return *obj.DocumentSourceFromZip
	}

	if obj.DocumentSourceVariant1 != nil {
		return *obj.DocumentSourceVariant1
	}

	if obj.DocumentSourceVariant2 != nil {
		return *obj.DocumentSourceVariant2
	}

	if obj.DocumentSourceWithUpload != nil {
		return *obj.DocumentSourceWithUpload
	}

	if obj.DocumentSourceWithUploadAndZip != nil {
		return *obj.DocumentSourceWithUploadAndZip
	}

	// all schemas are nil
	return nil
}

type NullableDocumentSourceIdentifier struct {
	value *DocumentSourceIdentifier
	isSet bool
}

func (v NullableDocumentSourceIdentifier) Get() *DocumentSourceIdentifier {
	return v.value
}

func (v *NullableDocumentSourceIdentifier) Set(val *DocumentSourceIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentSourceIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentSourceIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentSourceIdentifier(val *DocumentSourceIdentifier) *NullableDocumentSourceIdentifier {
	return &NullableDocumentSourceIdentifier{value: val, isSet: true}
}

func (v NullableDocumentSourceIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentSourceIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


