/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DocumentSourceVariant2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentSourceVariant2{}

// DocumentSourceVariant2 OneOf variant for documentSourceIdentifier
type DocumentSourceVariant2 struct {
	ExternalUrl string `json:"externalUrl"`
}

type _DocumentSourceVariant2 DocumentSourceVariant2

// NewDocumentSourceVariant2 instantiates a new DocumentSourceVariant2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentSourceVariant2(externalUrl string) *DocumentSourceVariant2 {
	this := DocumentSourceVariant2{}
	this.ExternalUrl = externalUrl
	return &this
}

// NewDocumentSourceVariant2WithDefaults instantiates a new DocumentSourceVariant2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentSourceVariant2WithDefaults() *DocumentSourceVariant2 {
	this := DocumentSourceVariant2{}
	return &this
}

// GetExternalUrl returns the ExternalUrl field value
func (o *DocumentSourceVariant2) GetExternalUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalUrl
}

// GetExternalUrlOk returns a tuple with the ExternalUrl field value
// and a boolean to check if the value has been set.
func (o *DocumentSourceVariant2) GetExternalUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalUrl, true
}

// SetExternalUrl sets field value
func (o *DocumentSourceVariant2) SetExternalUrl(v string) {
	o.ExternalUrl = v
}

func (o DocumentSourceVariant2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentSourceVariant2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["externalUrl"] = o.ExternalUrl
	return toSerialize, nil
}

func (o *DocumentSourceVariant2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"externalUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDocumentSourceVariant2 := _DocumentSourceVariant2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDocumentSourceVariant2)

	if err != nil {
		return err
	}

	*o = DocumentSourceVariant2(varDocumentSourceVariant2)

	return err
}

type NullableDocumentSourceVariant2 struct {
	value *DocumentSourceVariant2
	isSet bool
}

func (v NullableDocumentSourceVariant2) Get() *DocumentSourceVariant2 {
	return v.value
}

func (v *NullableDocumentSourceVariant2) Set(val *DocumentSourceVariant2) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentSourceVariant2) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentSourceVariant2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentSourceVariant2(val *DocumentSourceVariant2) *NullableDocumentSourceVariant2 {
	return &NullableDocumentSourceVariant2{value: val, isSet: true}
}

func (v NullableDocumentSourceVariant2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentSourceVariant2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


