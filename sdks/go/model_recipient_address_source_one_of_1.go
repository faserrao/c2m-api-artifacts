/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecipientAddressSourceOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecipientAddressSourceOneOf1{}

// RecipientAddressSourceOneOf1 struct for RecipientAddressSourceOneOf1
type RecipientAddressSourceOneOf1 struct {
	AddressId int32 `json:"addressId"`
}

type _RecipientAddressSourceOneOf1 RecipientAddressSourceOneOf1

// NewRecipientAddressSourceOneOf1 instantiates a new RecipientAddressSourceOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipientAddressSourceOneOf1(addressId int32) *RecipientAddressSourceOneOf1 {
	this := RecipientAddressSourceOneOf1{}
	this.AddressId = addressId
	return &this
}

// NewRecipientAddressSourceOneOf1WithDefaults instantiates a new RecipientAddressSourceOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipientAddressSourceOneOf1WithDefaults() *RecipientAddressSourceOneOf1 {
	this := RecipientAddressSourceOneOf1{}
	return &this
}

// GetAddressId returns the AddressId field value
func (o *RecipientAddressSourceOneOf1) GetAddressId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AddressId
}

// GetAddressIdOk returns a tuple with the AddressId field value
// and a boolean to check if the value has been set.
func (o *RecipientAddressSourceOneOf1) GetAddressIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddressId, true
}

// SetAddressId sets field value
func (o *RecipientAddressSourceOneOf1) SetAddressId(v int32) {
	o.AddressId = v
}

func (o RecipientAddressSourceOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecipientAddressSourceOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["addressId"] = o.AddressId
	return toSerialize, nil
}

func (o *RecipientAddressSourceOneOf1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"addressId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecipientAddressSourceOneOf1 := _RecipientAddressSourceOneOf1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecipientAddressSourceOneOf1)

	if err != nil {
		return err
	}

	*o = RecipientAddressSourceOneOf1(varRecipientAddressSourceOneOf1)

	return err
}

type NullableRecipientAddressSourceOneOf1 struct {
	value *RecipientAddressSourceOneOf1
	isSet bool
}

func (v NullableRecipientAddressSourceOneOf1) Get() *RecipientAddressSourceOneOf1 {
	return v.value
}

func (v *NullableRecipientAddressSourceOneOf1) Set(val *RecipientAddressSourceOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipientAddressSourceOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipientAddressSourceOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipientAddressSourceOneOf1(val *RecipientAddressSourceOneOf1) *NullableRecipientAddressSourceOneOf1 {
	return &NullableRecipientAddressSourceOneOf1{value: val, isSet: true}
}

func (v NullableRecipientAddressSourceOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipientAddressSourceOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


