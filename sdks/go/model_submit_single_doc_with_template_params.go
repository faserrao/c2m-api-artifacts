/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SubmitSingleDocWithTemplateParams - struct for SubmitSingleDocWithTemplateParams
type SubmitSingleDocWithTemplateParams struct {
	SubmitSingleDocWithTemplateParamsRequestOneOf *SubmitSingleDocWithTemplateParamsRequestOneOf
	SubmitSingleDocWithTemplateParamsRequestOneOf1 *SubmitSingleDocWithTemplateParamsRequestOneOf1
	SubmitSingleDocWithTemplateParamsRequestOneOf2 *SubmitSingleDocWithTemplateParamsRequestOneOf2
}

// SubmitSingleDocWithTemplateParamsRequestOneOfAsSubmitSingleDocWithTemplateParams is a convenience function that returns SubmitSingleDocWithTemplateParamsRequestOneOf wrapped in SubmitSingleDocWithTemplateParams
func SubmitSingleDocWithTemplateParamsRequestOneOfAsSubmitSingleDocWithTemplateParams(v *SubmitSingleDocWithTemplateParamsRequestOneOf) SubmitSingleDocWithTemplateParams {
	return SubmitSingleDocWithTemplateParams{
		SubmitSingleDocWithTemplateParamsRequestOneOf: v,
	}
}

// SubmitSingleDocWithTemplateParamsRequestOneOf1AsSubmitSingleDocWithTemplateParams is a convenience function that returns SubmitSingleDocWithTemplateParamsRequestOneOf1 wrapped in SubmitSingleDocWithTemplateParams
func SubmitSingleDocWithTemplateParamsRequestOneOf1AsSubmitSingleDocWithTemplateParams(v *SubmitSingleDocWithTemplateParamsRequestOneOf1) SubmitSingleDocWithTemplateParams {
	return SubmitSingleDocWithTemplateParams{
		SubmitSingleDocWithTemplateParamsRequestOneOf1: v,
	}
}

// SubmitSingleDocWithTemplateParamsRequestOneOf2AsSubmitSingleDocWithTemplateParams is a convenience function that returns SubmitSingleDocWithTemplateParamsRequestOneOf2 wrapped in SubmitSingleDocWithTemplateParams
func SubmitSingleDocWithTemplateParamsRequestOneOf2AsSubmitSingleDocWithTemplateParams(v *SubmitSingleDocWithTemplateParamsRequestOneOf2) SubmitSingleDocWithTemplateParams {
	return SubmitSingleDocWithTemplateParams{
		SubmitSingleDocWithTemplateParamsRequestOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SubmitSingleDocWithTemplateParams) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SubmitSingleDocWithTemplateParamsRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.SubmitSingleDocWithTemplateParamsRequestOneOf)
	if err == nil {
		jsonSubmitSingleDocWithTemplateParamsRequestOneOf, _ := json.Marshal(dst.SubmitSingleDocWithTemplateParamsRequestOneOf)
		if string(jsonSubmitSingleDocWithTemplateParamsRequestOneOf) == "{}" { // empty struct
			dst.SubmitSingleDocWithTemplateParamsRequestOneOf = nil
		} else {
			if err = validator.Validate(dst.SubmitSingleDocWithTemplateParamsRequestOneOf); err != nil {
				dst.SubmitSingleDocWithTemplateParamsRequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.SubmitSingleDocWithTemplateParamsRequestOneOf = nil
	}

	// try to unmarshal data into SubmitSingleDocWithTemplateParamsRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.SubmitSingleDocWithTemplateParamsRequestOneOf1)
	if err == nil {
		jsonSubmitSingleDocWithTemplateParamsRequestOneOf1, _ := json.Marshal(dst.SubmitSingleDocWithTemplateParamsRequestOneOf1)
		if string(jsonSubmitSingleDocWithTemplateParamsRequestOneOf1) == "{}" { // empty struct
			dst.SubmitSingleDocWithTemplateParamsRequestOneOf1 = nil
		} else {
			if err = validator.Validate(dst.SubmitSingleDocWithTemplateParamsRequestOneOf1); err != nil {
				dst.SubmitSingleDocWithTemplateParamsRequestOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SubmitSingleDocWithTemplateParamsRequestOneOf1 = nil
	}

	// try to unmarshal data into SubmitSingleDocWithTemplateParamsRequestOneOf2
	err = newStrictDecoder(data).Decode(&dst.SubmitSingleDocWithTemplateParamsRequestOneOf2)
	if err == nil {
		jsonSubmitSingleDocWithTemplateParamsRequestOneOf2, _ := json.Marshal(dst.SubmitSingleDocWithTemplateParamsRequestOneOf2)
		if string(jsonSubmitSingleDocWithTemplateParamsRequestOneOf2) == "{}" { // empty struct
			dst.SubmitSingleDocWithTemplateParamsRequestOneOf2 = nil
		} else {
			if err = validator.Validate(dst.SubmitSingleDocWithTemplateParamsRequestOneOf2); err != nil {
				dst.SubmitSingleDocWithTemplateParamsRequestOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SubmitSingleDocWithTemplateParamsRequestOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SubmitSingleDocWithTemplateParamsRequestOneOf = nil
		dst.SubmitSingleDocWithTemplateParamsRequestOneOf1 = nil
		dst.SubmitSingleDocWithTemplateParamsRequestOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SubmitSingleDocWithTemplateParams)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SubmitSingleDocWithTemplateParams)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SubmitSingleDocWithTemplateParams) MarshalJSON() ([]byte, error) {
	if src.SubmitSingleDocWithTemplateParamsRequestOneOf != nil {
		return json.Marshal(&src.SubmitSingleDocWithTemplateParamsRequestOneOf)
	}

	if src.SubmitSingleDocWithTemplateParamsRequestOneOf1 != nil {
		return json.Marshal(&src.SubmitSingleDocWithTemplateParamsRequestOneOf1)
	}

	if src.SubmitSingleDocWithTemplateParamsRequestOneOf2 != nil {
		return json.Marshal(&src.SubmitSingleDocWithTemplateParamsRequestOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SubmitSingleDocWithTemplateParams) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SubmitSingleDocWithTemplateParamsRequestOneOf != nil {
		return obj.SubmitSingleDocWithTemplateParamsRequestOneOf
	}

	if obj.SubmitSingleDocWithTemplateParamsRequestOneOf1 != nil {
		return obj.SubmitSingleDocWithTemplateParamsRequestOneOf1
	}

	if obj.SubmitSingleDocWithTemplateParamsRequestOneOf2 != nil {
		return obj.SubmitSingleDocWithTemplateParamsRequestOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SubmitSingleDocWithTemplateParams) GetActualInstanceValue() (interface{}) {
	if obj.SubmitSingleDocWithTemplateParamsRequestOneOf != nil {
		return *obj.SubmitSingleDocWithTemplateParamsRequestOneOf
	}

	if obj.SubmitSingleDocWithTemplateParamsRequestOneOf1 != nil {
		return *obj.SubmitSingleDocWithTemplateParamsRequestOneOf1
	}

	if obj.SubmitSingleDocWithTemplateParamsRequestOneOf2 != nil {
		return *obj.SubmitSingleDocWithTemplateParamsRequestOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableSubmitSingleDocWithTemplateParams struct {
	value *SubmitSingleDocWithTemplateParams
	isSet bool
}

func (v NullableSubmitSingleDocWithTemplateParams) Get() *SubmitSingleDocWithTemplateParams {
	return v.value
}

func (v *NullableSubmitSingleDocWithTemplateParams) Set(val *SubmitSingleDocWithTemplateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitSingleDocWithTemplateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitSingleDocWithTemplateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitSingleDocWithTemplateParams(val *SubmitSingleDocWithTemplateParams) *NullableSubmitSingleDocWithTemplateParams {
	return &NullableSubmitSingleDocWithTemplateParams{value: val, isSet: true}
}

func (v NullableSubmitSingleDocWithTemplateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitSingleDocWithTemplateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


