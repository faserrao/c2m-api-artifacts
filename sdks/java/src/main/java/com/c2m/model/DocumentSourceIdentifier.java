/*
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.c2m.model;

import java.util.Objects;
import com.c2m.model.DocumentSourceFromZip;
import com.c2m.model.DocumentSourceVariant1;
import com.c2m.model.DocumentSourceVariant2;
import com.c2m.model.DocumentSourceWithUpload;
import com.c2m.model.DocumentSourceWithUploadAndZip;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.c2m.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-02T22:17:37.852537932Z[Etc/UTC]", comments = "Generator version: 7.15.0")
public class DocumentSourceIdentifier extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(DocumentSourceIdentifier.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DocumentSourceIdentifier.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DocumentSourceIdentifier' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DocumentSourceVariant1> adapterDocumentSourceVariant1 = gson.getDelegateAdapter(this, TypeToken.get(DocumentSourceVariant1.class));
            final TypeAdapter<DocumentSourceVariant2> adapterDocumentSourceVariant2 = gson.getDelegateAdapter(this, TypeToken.get(DocumentSourceVariant2.class));
            final TypeAdapter<DocumentSourceWithUpload> adapterDocumentSourceWithUpload = gson.getDelegateAdapter(this, TypeToken.get(DocumentSourceWithUpload.class));
            final TypeAdapter<DocumentSourceWithUploadAndZip> adapterDocumentSourceWithUploadAndZip = gson.getDelegateAdapter(this, TypeToken.get(DocumentSourceWithUploadAndZip.class));
            final TypeAdapter<DocumentSourceFromZip> adapterDocumentSourceFromZip = gson.getDelegateAdapter(this, TypeToken.get(DocumentSourceFromZip.class));

            return (TypeAdapter<T>) new TypeAdapter<DocumentSourceIdentifier>() {
                @Override
                public void write(JsonWriter out, DocumentSourceIdentifier value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `DocumentSourceVariant1`
                    if (value.getActualInstance() instanceof DocumentSourceVariant1) {
                        JsonElement element = adapterDocumentSourceVariant1.toJsonTree((DocumentSourceVariant1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DocumentSourceVariant2`
                    if (value.getActualInstance() instanceof DocumentSourceVariant2) {
                        JsonElement element = adapterDocumentSourceVariant2.toJsonTree((DocumentSourceVariant2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DocumentSourceWithUpload`
                    if (value.getActualInstance() instanceof DocumentSourceWithUpload) {
                        JsonElement element = adapterDocumentSourceWithUpload.toJsonTree((DocumentSourceWithUpload)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DocumentSourceWithUploadAndZip`
                    if (value.getActualInstance() instanceof DocumentSourceWithUploadAndZip) {
                        JsonElement element = adapterDocumentSourceWithUploadAndZip.toJsonTree((DocumentSourceWithUploadAndZip)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DocumentSourceFromZip`
                    if (value.getActualInstance() instanceof DocumentSourceFromZip) {
                        JsonElement element = adapterDocumentSourceFromZip.toJsonTree((DocumentSourceFromZip)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: DocumentSourceFromZip, DocumentSourceVariant1, DocumentSourceVariant2, DocumentSourceWithUpload, DocumentSourceWithUploadAndZip");
                }

                @Override
                public DocumentSourceIdentifier read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize DocumentSourceVariant1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DocumentSourceVariant1.validateJsonElement(jsonElement);
                        actualAdapter = adapterDocumentSourceVariant1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DocumentSourceVariant1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DocumentSourceVariant1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DocumentSourceVariant1'", e);
                    }
                    // deserialize DocumentSourceVariant2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DocumentSourceVariant2.validateJsonElement(jsonElement);
                        actualAdapter = adapterDocumentSourceVariant2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DocumentSourceVariant2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DocumentSourceVariant2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DocumentSourceVariant2'", e);
                    }
                    // deserialize DocumentSourceWithUpload
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DocumentSourceWithUpload.validateJsonElement(jsonElement);
                        actualAdapter = adapterDocumentSourceWithUpload;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DocumentSourceWithUpload'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DocumentSourceWithUpload failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DocumentSourceWithUpload'", e);
                    }
                    // deserialize DocumentSourceWithUploadAndZip
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DocumentSourceWithUploadAndZip.validateJsonElement(jsonElement);
                        actualAdapter = adapterDocumentSourceWithUploadAndZip;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DocumentSourceWithUploadAndZip'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DocumentSourceWithUploadAndZip failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DocumentSourceWithUploadAndZip'", e);
                    }
                    // deserialize DocumentSourceFromZip
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DocumentSourceFromZip.validateJsonElement(jsonElement);
                        actualAdapter = adapterDocumentSourceFromZip;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DocumentSourceFromZip'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DocumentSourceFromZip failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DocumentSourceFromZip'", e);
                    }

                    if (match == 1) {
                        DocumentSourceIdentifier ret = new DocumentSourceIdentifier();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for DocumentSourceIdentifier: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public DocumentSourceIdentifier() {
        super("oneOf", Boolean.FALSE);
    }

    public DocumentSourceIdentifier(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("DocumentSourceVariant1", DocumentSourceVariant1.class);
        schemas.put("DocumentSourceVariant2", DocumentSourceVariant2.class);
        schemas.put("DocumentSourceWithUpload", DocumentSourceWithUpload.class);
        schemas.put("DocumentSourceWithUploadAndZip", DocumentSourceWithUploadAndZip.class);
        schemas.put("DocumentSourceFromZip", DocumentSourceFromZip.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return DocumentSourceIdentifier.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * DocumentSourceFromZip, DocumentSourceVariant1, DocumentSourceVariant2, DocumentSourceWithUpload, DocumentSourceWithUploadAndZip
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof DocumentSourceVariant1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DocumentSourceVariant2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DocumentSourceWithUpload) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DocumentSourceWithUploadAndZip) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DocumentSourceFromZip) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be DocumentSourceFromZip, DocumentSourceVariant1, DocumentSourceVariant2, DocumentSourceWithUpload, DocumentSourceWithUploadAndZip");
    }

    /**
     * Get the actual instance, which can be the following:
     * DocumentSourceFromZip, DocumentSourceVariant1, DocumentSourceVariant2, DocumentSourceWithUpload, DocumentSourceWithUploadAndZip
     *
     * @return The actual instance (DocumentSourceFromZip, DocumentSourceVariant1, DocumentSourceVariant2, DocumentSourceWithUpload, DocumentSourceWithUploadAndZip)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `DocumentSourceVariant1`. If the actual instance is not `DocumentSourceVariant1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DocumentSourceVariant1`
     * @throws ClassCastException if the instance is not `DocumentSourceVariant1`
     */
    public DocumentSourceVariant1 getDocumentSourceVariant1() throws ClassCastException {
        return (DocumentSourceVariant1)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DocumentSourceVariant2`. If the actual instance is not `DocumentSourceVariant2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DocumentSourceVariant2`
     * @throws ClassCastException if the instance is not `DocumentSourceVariant2`
     */
    public DocumentSourceVariant2 getDocumentSourceVariant2() throws ClassCastException {
        return (DocumentSourceVariant2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DocumentSourceWithUpload`. If the actual instance is not `DocumentSourceWithUpload`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DocumentSourceWithUpload`
     * @throws ClassCastException if the instance is not `DocumentSourceWithUpload`
     */
    public DocumentSourceWithUpload getDocumentSourceWithUpload() throws ClassCastException {
        return (DocumentSourceWithUpload)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DocumentSourceWithUploadAndZip`. If the actual instance is not `DocumentSourceWithUploadAndZip`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DocumentSourceWithUploadAndZip`
     * @throws ClassCastException if the instance is not `DocumentSourceWithUploadAndZip`
     */
    public DocumentSourceWithUploadAndZip getDocumentSourceWithUploadAndZip() throws ClassCastException {
        return (DocumentSourceWithUploadAndZip)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DocumentSourceFromZip`. If the actual instance is not `DocumentSourceFromZip`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DocumentSourceFromZip`
     * @throws ClassCastException if the instance is not `DocumentSourceFromZip`
     */
    public DocumentSourceFromZip getDocumentSourceFromZip() throws ClassCastException {
        return (DocumentSourceFromZip)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to DocumentSourceIdentifier
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with DocumentSourceVariant1
        try {
            DocumentSourceVariant1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DocumentSourceVariant1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DocumentSourceVariant2
        try {
            DocumentSourceVariant2.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DocumentSourceVariant2 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DocumentSourceWithUpload
        try {
            DocumentSourceWithUpload.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DocumentSourceWithUpload failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DocumentSourceWithUploadAndZip
        try {
            DocumentSourceWithUploadAndZip.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DocumentSourceWithUploadAndZip failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DocumentSourceFromZip
        try {
            DocumentSourceFromZip.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DocumentSourceFromZip failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for DocumentSourceIdentifier with oneOf schemas: DocumentSourceFromZip, DocumentSourceVariant1, DocumentSourceVariant2, DocumentSourceWithUpload, DocumentSourceWithUploadAndZip. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of DocumentSourceIdentifier given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DocumentSourceIdentifier
     * @throws IOException if the JSON string is invalid with respect to DocumentSourceIdentifier
     */
    public static DocumentSourceIdentifier fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DocumentSourceIdentifier.class);
    }

    /**
     * Convert an instance of DocumentSourceIdentifier to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

