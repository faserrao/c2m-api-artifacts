/**
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DocumentSourceFromZip model module.
 * @module c2m_api/model/DocumentSourceFromZip
 * @version 2.0.0
 */
class DocumentSourceFromZip {
    /**
     * Constructs a new <code>DocumentSourceFromZip</code>.
     * @alias module:c2m_api/model/DocumentSourceFromZip
     * @param zipId {Number} 
     * @param documentName {String} 
     */
    constructor(zipId, documentName) { 
        
        DocumentSourceFromZip.initialize(this, zipId, documentName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, zipId, documentName) { 
        obj['zipId'] = zipId;
        obj['documentName'] = documentName;
    }

    /**
     * Constructs a <code>DocumentSourceFromZip</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:c2m_api/model/DocumentSourceFromZip} obj Optional instance to populate.
     * @return {module:c2m_api/model/DocumentSourceFromZip} The populated <code>DocumentSourceFromZip</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentSourceFromZip();

            if (data.hasOwnProperty('zipId')) {
                obj['zipId'] = ApiClient.convertToType(data['zipId'], 'Number');
            }
            if (data.hasOwnProperty('documentName')) {
                obj['documentName'] = ApiClient.convertToType(data['documentName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentSourceFromZip</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentSourceFromZip</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentSourceFromZip.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['documentName'] && !(typeof data['documentName'] === 'string' || data['documentName'] instanceof String)) {
            throw new Error("Expected the field `documentName` to be a primitive type in the JSON string but got " + data['documentName']);
        }

        return true;
    }


}

DocumentSourceFromZip.RequiredProperties = ["zipId", "documentName"];

/**
 * @member {Number} zipId
 */
DocumentSourceFromZip.prototype['zipId'] = undefined;

/**
 * @member {String} documentName
 */
DocumentSourceFromZip.prototype['documentName'] = undefined;






export default DocumentSourceFromZip;

