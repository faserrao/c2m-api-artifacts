/**
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentSourceFromZip from './DocumentSourceFromZip';
import DocumentSourceVariant1 from './DocumentSourceVariant1';
import DocumentSourceVariant2 from './DocumentSourceVariant2';
import DocumentSourceWithUpload from './DocumentSourceWithUpload';
import DocumentSourceWithUploadAndZip from './DocumentSourceWithUploadAndZip';

/**
 * The DocumentSourceIdentifier model module.
 * @module c2m_api/model/DocumentSourceIdentifier
 * @version 2.0.0
 */
class DocumentSourceIdentifier {
    /**
     * Constructs a new <code>DocumentSourceIdentifier</code>.
     * @alias module:c2m_api/model/DocumentSourceIdentifier
     * @param {(module:c2m_api/model/DocumentSourceFromZip|module:c2m_api/model/DocumentSourceVariant1|module:c2m_api/model/DocumentSourceVariant2|module:c2m_api/model/DocumentSourceWithUpload|module:c2m_api/model/DocumentSourceWithUploadAndZip)} instance The actual instance to initialize DocumentSourceIdentifier.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "DocumentSourceVariant1") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                DocumentSourceVariant1.validateJSON(instance); // throw an exception if no match
                // create DocumentSourceVariant1 from JS object
                this.actualInstance = DocumentSourceVariant1.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into DocumentSourceVariant1
            errorMessages.push("Failed to construct DocumentSourceVariant1: " + err)
        }

        try {
            if (typeof instance === "DocumentSourceVariant2") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                DocumentSourceVariant2.validateJSON(instance); // throw an exception if no match
                // create DocumentSourceVariant2 from JS object
                this.actualInstance = DocumentSourceVariant2.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into DocumentSourceVariant2
            errorMessages.push("Failed to construct DocumentSourceVariant2: " + err)
        }

        try {
            if (typeof instance === "DocumentSourceWithUpload") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                DocumentSourceWithUpload.validateJSON(instance); // throw an exception if no match
                // create DocumentSourceWithUpload from JS object
                this.actualInstance = DocumentSourceWithUpload.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into DocumentSourceWithUpload
            errorMessages.push("Failed to construct DocumentSourceWithUpload: " + err)
        }

        try {
            if (typeof instance === "DocumentSourceWithUploadAndZip") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                DocumentSourceWithUploadAndZip.validateJSON(instance); // throw an exception if no match
                // create DocumentSourceWithUploadAndZip from JS object
                this.actualInstance = DocumentSourceWithUploadAndZip.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into DocumentSourceWithUploadAndZip
            errorMessages.push("Failed to construct DocumentSourceWithUploadAndZip: " + err)
        }

        try {
            if (typeof instance === "DocumentSourceFromZip") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                DocumentSourceFromZip.validateJSON(instance); // throw an exception if no match
                // create DocumentSourceFromZip from JS object
                this.actualInstance = DocumentSourceFromZip.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into DocumentSourceFromZip
            errorMessages.push("Failed to construct DocumentSourceFromZip: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `DocumentSourceIdentifier` with oneOf schemas DocumentSourceFromZip, DocumentSourceVariant1, DocumentSourceVariant2, DocumentSourceWithUpload, DocumentSourceWithUploadAndZip. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `DocumentSourceIdentifier` with oneOf schemas DocumentSourceFromZip, DocumentSourceVariant1, DocumentSourceVariant2, DocumentSourceWithUpload, DocumentSourceWithUploadAndZip. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>DocumentSourceIdentifier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:c2m_api/model/DocumentSourceIdentifier} obj Optional instance to populate.
     * @return {module:c2m_api/model/DocumentSourceIdentifier} The populated <code>DocumentSourceIdentifier</code> instance.
     */
    static constructFromObject(data, obj) {
        return new DocumentSourceIdentifier(data);
    }

    /**
     * Gets the actual instance, which can be <code>DocumentSourceFromZip</code>, <code>DocumentSourceVariant1</code>, <code>DocumentSourceVariant2</code>, <code>DocumentSourceWithUpload</code>, <code>DocumentSourceWithUploadAndZip</code>.
     * @return {(module:c2m_api/model/DocumentSourceFromZip|module:c2m_api/model/DocumentSourceVariant1|module:c2m_api/model/DocumentSourceVariant2|module:c2m_api/model/DocumentSourceWithUpload|module:c2m_api/model/DocumentSourceWithUploadAndZip)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>DocumentSourceFromZip</code>, <code>DocumentSourceVariant1</code>, <code>DocumentSourceVariant2</code>, <code>DocumentSourceWithUpload</code>, <code>DocumentSourceWithUploadAndZip</code>.
     * @param {(module:c2m_api/model/DocumentSourceFromZip|module:c2m_api/model/DocumentSourceVariant1|module:c2m_api/model/DocumentSourceVariant2|module:c2m_api/model/DocumentSourceWithUpload|module:c2m_api/model/DocumentSourceWithUploadAndZip)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = DocumentSourceIdentifier.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of DocumentSourceIdentifier from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:c2m_api/model/DocumentSourceIdentifier} An instance of DocumentSourceIdentifier.
     */
    static fromJSON = function(json_string){
        return DocumentSourceIdentifier.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {Number} documentId
 */
DocumentSourceIdentifier.prototype['documentId'] = undefined;

/**
 * @member {String} externalUrl
 */
DocumentSourceIdentifier.prototype['externalUrl'] = undefined;

/**
 * @member {Number} uploadRequestId
 */
DocumentSourceIdentifier.prototype['uploadRequestId'] = undefined;

/**
 * @member {String} documentName
 */
DocumentSourceIdentifier.prototype['documentName'] = undefined;

/**
 * @member {Number} zipId
 */
DocumentSourceIdentifier.prototype['zipId'] = undefined;


DocumentSourceIdentifier.OneOf = ["DocumentSourceFromZip", "DocumentSourceVariant1", "DocumentSourceVariant2", "DocumentSourceWithUpload", "DocumentSourceWithUploadAndZip"];

export default DocumentSourceIdentifier;

