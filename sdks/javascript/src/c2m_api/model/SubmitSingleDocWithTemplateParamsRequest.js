/**
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentSourceIdentifier from './DocumentSourceIdentifier';
import PaymentDetails from './PaymentDetails';
import RecipientAddressSource from './RecipientAddressSource';
import SubmitSingleDocWithTemplateParamsRequestOneOf from './SubmitSingleDocWithTemplateParamsRequestOneOf';
import SubmitSingleDocWithTemplateParamsRequestOneOf1 from './SubmitSingleDocWithTemplateParamsRequestOneOf1';
import SubmitSingleDocWithTemplateParamsRequestOneOf2 from './SubmitSingleDocWithTemplateParamsRequestOneOf2';

/**
 * The SubmitSingleDocWithTemplateParamsRequest model module.
 * @module c2m_api/model/SubmitSingleDocWithTemplateParamsRequest
 * @version 2.0.0
 */
class SubmitSingleDocWithTemplateParamsRequest {
    /**
     * Constructs a new <code>SubmitSingleDocWithTemplateParamsRequest</code>.
     * @alias module:c2m_api/model/SubmitSingleDocWithTemplateParamsRequest
     * @param {(module:c2m_api/model/SubmitSingleDocWithTemplateParamsRequestOneOf|module:c2m_api/model/SubmitSingleDocWithTemplateParamsRequestOneOf1|module:c2m_api/model/SubmitSingleDocWithTemplateParamsRequestOneOf2)} instance The actual instance to initialize SubmitSingleDocWithTemplateParamsRequest.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "SubmitSingleDocWithTemplateParamsRequestOneOf") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SubmitSingleDocWithTemplateParamsRequestOneOf.validateJSON(instance); // throw an exception if no match
                // create SubmitSingleDocWithTemplateParamsRequestOneOf from JS object
                this.actualInstance = SubmitSingleDocWithTemplateParamsRequestOneOf.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SubmitSingleDocWithTemplateParamsRequestOneOf
            errorMessages.push("Failed to construct SubmitSingleDocWithTemplateParamsRequestOneOf: " + err)
        }

        try {
            if (typeof instance === "SubmitSingleDocWithTemplateParamsRequestOneOf1") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SubmitSingleDocWithTemplateParamsRequestOneOf1.validateJSON(instance); // throw an exception if no match
                // create SubmitSingleDocWithTemplateParamsRequestOneOf1 from JS object
                this.actualInstance = SubmitSingleDocWithTemplateParamsRequestOneOf1.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SubmitSingleDocWithTemplateParamsRequestOneOf1
            errorMessages.push("Failed to construct SubmitSingleDocWithTemplateParamsRequestOneOf1: " + err)
        }

        try {
            if (typeof instance === "SubmitSingleDocWithTemplateParamsRequestOneOf2") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SubmitSingleDocWithTemplateParamsRequestOneOf2.validateJSON(instance); // throw an exception if no match
                // create SubmitSingleDocWithTemplateParamsRequestOneOf2 from JS object
                this.actualInstance = SubmitSingleDocWithTemplateParamsRequestOneOf2.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SubmitSingleDocWithTemplateParamsRequestOneOf2
            errorMessages.push("Failed to construct SubmitSingleDocWithTemplateParamsRequestOneOf2: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `SubmitSingleDocWithTemplateParamsRequest` with oneOf schemas SubmitSingleDocWithTemplateParamsRequestOneOf, SubmitSingleDocWithTemplateParamsRequestOneOf1, SubmitSingleDocWithTemplateParamsRequestOneOf2. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `SubmitSingleDocWithTemplateParamsRequest` with oneOf schemas SubmitSingleDocWithTemplateParamsRequestOneOf, SubmitSingleDocWithTemplateParamsRequestOneOf1, SubmitSingleDocWithTemplateParamsRequestOneOf2. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>SubmitSingleDocWithTemplateParamsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:c2m_api/model/SubmitSingleDocWithTemplateParamsRequest} obj Optional instance to populate.
     * @return {module:c2m_api/model/SubmitSingleDocWithTemplateParamsRequest} The populated <code>SubmitSingleDocWithTemplateParamsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        return new SubmitSingleDocWithTemplateParamsRequest(data);
    }

    /**
     * Gets the actual instance, which can be <code>SubmitSingleDocWithTemplateParamsRequestOneOf</code>, <code>SubmitSingleDocWithTemplateParamsRequestOneOf1</code>, <code>SubmitSingleDocWithTemplateParamsRequestOneOf2</code>.
     * @return {(module:c2m_api/model/SubmitSingleDocWithTemplateParamsRequestOneOf|module:c2m_api/model/SubmitSingleDocWithTemplateParamsRequestOneOf1|module:c2m_api/model/SubmitSingleDocWithTemplateParamsRequestOneOf2)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>SubmitSingleDocWithTemplateParamsRequestOneOf</code>, <code>SubmitSingleDocWithTemplateParamsRequestOneOf1</code>, <code>SubmitSingleDocWithTemplateParamsRequestOneOf2</code>.
     * @param {(module:c2m_api/model/SubmitSingleDocWithTemplateParamsRequestOneOf|module:c2m_api/model/SubmitSingleDocWithTemplateParamsRequestOneOf1|module:c2m_api/model/SubmitSingleDocWithTemplateParamsRequestOneOf2)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = SubmitSingleDocWithTemplateParamsRequest.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of SubmitSingleDocWithTemplateParamsRequest from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:c2m_api/model/SubmitSingleDocWithTemplateParamsRequest} An instance of SubmitSingleDocWithTemplateParamsRequest.
     */
    static fromJSON = function(json_string){
        return SubmitSingleDocWithTemplateParamsRequest.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {String} jobTemplate
 */
SubmitSingleDocWithTemplateParamsRequest.prototype['jobTemplate'] = undefined;

/**
 * @member {module:c2m_api/model/PaymentDetails} paymentDetails
 */
SubmitSingleDocWithTemplateParamsRequest.prototype['paymentDetails'] = undefined;

/**
 * @member {Array.<String>} tags
 */
SubmitSingleDocWithTemplateParamsRequest.prototype['tags'] = undefined;

/**
 * @member {Array.<module:c2m_api/model/RecipientAddressSource>} recipientAddressSources
 */
SubmitSingleDocWithTemplateParamsRequest.prototype['recipientAddressSources'] = undefined;

/**
 * @member {module:c2m_api/model/DocumentSourceIdentifier} documentSourceIdentifier
 */
SubmitSingleDocWithTemplateParamsRequest.prototype['documentSourceIdentifier'] = undefined;


SubmitSingleDocWithTemplateParamsRequest.OneOf = ["SubmitSingleDocWithTemplateParamsRequestOneOf", "SubmitSingleDocWithTemplateParamsRequestOneOf1", "SubmitSingleDocWithTemplateParamsRequestOneOf2"];

export default SubmitSingleDocWithTemplateParamsRequest;

