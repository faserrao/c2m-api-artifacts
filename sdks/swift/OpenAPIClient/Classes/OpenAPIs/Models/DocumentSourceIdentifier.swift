//
// DocumentSourceIdentifier.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public enum DocumentSourceIdentifier: Codable, JSONEncodable, Hashable {
    case typeDocumentSourceFromZip(DocumentSourceFromZip)
    case typeDocumentSourceVariant1(DocumentSourceVariant1)
    case typeDocumentSourceVariant2(DocumentSourceVariant2)
    case typeDocumentSourceWithUpload(DocumentSourceWithUpload)
    case typeDocumentSourceWithUploadAndZip(DocumentSourceWithUploadAndZip)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeDocumentSourceFromZip(let value):
            try container.encode(value)
        case .typeDocumentSourceVariant1(let value):
            try container.encode(value)
        case .typeDocumentSourceVariant2(let value):
            try container.encode(value)
        case .typeDocumentSourceWithUpload(let value):
            try container.encode(value)
        case .typeDocumentSourceWithUploadAndZip(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(DocumentSourceFromZip.self) {
            self = .typeDocumentSourceFromZip(value)
        } else if let value = try? container.decode(DocumentSourceVariant1.self) {
            self = .typeDocumentSourceVariant1(value)
        } else if let value = try? container.decode(DocumentSourceVariant2.self) {
            self = .typeDocumentSourceVariant2(value)
        } else if let value = try? container.decode(DocumentSourceWithUpload.self) {
            self = .typeDocumentSourceWithUpload(value)
        } else if let value = try? container.decode(DocumentSourceWithUploadAndZip.self) {
            self = .typeDocumentSourceWithUploadAndZip(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of DocumentSourceIdentifier"))
        }
    }
}

